<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 7.1.3">

    <issue
        id="ObsoleteLintCustomCheck"
        severity="Warning"
        message="Lint found an issue registry (`com.example.greenchecks.MyIssueRegistry`)&#xA;which did not specify the Lint API version it was compiled with.&#xA;&#xA;**This means that the lint checks are likely not compatible.**&#xA;&#xA;If you are the author of this lint check, make your lint&#xA;`IssueRegistry` class contain&#xA;  override val api: Int = com.android.tools.lint.detector.api.CURRENT_API&#xA;or from Java,&#xA;  @Override public int getApi() { return com.android.tools.lint.detector.api.ApiKt.CURRENT_API; }&#xA;&#xA;If you are just using lint checks from a third party library&#xA;you have no control over, you can disable these lint checks (if&#xA;they misbehave) like this:&#xA;&#xA;    android {&#xA;        lintOptions {&#xA;            disable &quot;BluetoothLowEnergy&quot;,&#xA;                    &quot;DarkUI&quot;,&#xA;                    &quot;DirtyBoot&quot;,&#xA;                    &quot;DurableWakeLock&quot;,&#xA;                    &quot;EverlastingService&quot;,&#xA;                    &quot;FusedLocationProvider&quot;,&#xA;                    &quot;InternetInTheLoop&quot;,&#xA;                    &quot;KeepCPUOn&quot;,&#xA;                    &quot;KeepScreenOn&quot;,&#xA;                    &quot;RigidAlarm&quot;,&#xA;                    &quot;SensorCoalesce&quot;,&#xA;                    &quot;SensorLeak&quot;,&#xA;                    &quot;UncompressedDataTransmission&quot;&#xA;        }&#xA;    }&#xA;"
        category="Lint"
        priority="10"
        summary="Obsolete custom lint check"
        explanation="Lint can be extended with &quot;custom checks&quot;: additional checks implemented by developers and libraries to for example enforce specific API usages required by a library or a company coding style guideline.&#xA;&#xA;The Lint APIs are not yet stable, so these checks may either cause a performance degradation, or stop working, or provide wrong results.&#xA;&#xA;This warning flags custom lint checks that are found to be using obsolete APIs and will need to be updated to run in the current lint environment.&#xA;&#xA;It may also flag issues found to be using a **newer** version of the API, meaning that you need to use a newer version of lint (or Android Studio or Gradle plugin etc) to work with these checks.">
        <location
            file="C:\Users\André\.android\lint\greenchecks.jar"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="               ~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\DodgeMain.java"
            line="267"
            column="16"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="  return String.format(&quot;%.1f&quot;, currentFPS);"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\FrameRateManager.java"
            line="171"
            column="10"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="  return String.format(&quot;FPS: %.1f target: %.1f %s&quot;, currentFPS, targetFramesPerSecond(), (frameRateLocked) ? &quot;(locked)&quot; : &quot;&quot;);"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\FrameRateManager.java"
            line="176"
            column="10"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: https://developer.android.com/reference/android/os/Build.VERSION_CODES.html as well as follow this guide:&#xA;https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        url="https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        urls="https://developer.android.com/distribute/best-practices/develop/target-sdk.html,https://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 31"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\build.gradle"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `installLocation` is only used in API level 8 and higher (current min is 4)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).&#xA;&#xA;This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&#xA;&#xA;Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:installLocation=&quot;auto&quot;"
        errorLine2="                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\AndroidManifest.xml"
            line="2"
            column="70"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `isGame` is only used in API level 21 and higher (current min is 4)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).&#xA;&#xA;This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&#xA;&#xA;Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:isGame=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\AndroidManifest.xml"
            line="11"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `appCategory` is only used in API level 26 and higher (current min is 4)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).&#xA;&#xA;This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&#xA;&#xA;Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:appCategory=&quot;game&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\AndroidManifest.xml"
            line="12"
            column="9"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This `minSdkVersion` value (`4`) is not used; it is always overridden by the value specified in the Gradle build script (`4`)"
        category="Correctness"
        priority="4"
        summary="Value overridden by Gradle build script"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="    &lt;uses-sdk android:minSdkVersion=&quot;4&quot; />"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\AndroidManifest.xml"
            line="6"
            column="15"/>
    </issue>

    <issue
        id="InOrMmUsage"
        severity="Warning"
        message="Avoid using &quot;`mm`&quot; as units (it does not work accurately on all devices); use &quot;`dp`&quot; instead"
        category="Correctness"
        priority="4"
        summary="Using `mm` or `in` dimensions"
        explanation="Avoid using `mm` (millimeters) or `in` (inches) as the unit for dimensions.&#xA;&#xA;While it should work in principle, unfortunately many devices do not report the correct true physical density, which means that the dimension calculations won&apos;t work correctly. You are better off using `dp` (and for font sizes, `sp`)."
        errorLine1="    android:gravity=&quot;left|center&quot; android:text=&quot;Select Background...&quot; android:paddingLeft=&quot;2mm&quot;"
        errorLine2="                                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="10"
            column="71"/>
    </issue>

    <issue
        id="InOrMmUsage"
        severity="Warning"
        message="Avoid using &quot;`mm`&quot; as units (it does not work accurately on all devices); use &quot;`dp`&quot; instead"
        category="Correctness"
        priority="4"
        summary="Using `mm` or `in` dimensions"
        explanation="Avoid using `mm` (millimeters) or `in` (inches) as the unit for dimensions.&#xA;&#xA;While it should work in principle, unfortunately many devices do not report the correct true physical density, which means that the dimension calculations won&apos;t work correctly. You are better off using `dp` (and for font sizes, `sp`)."
        errorLine1=" &lt;ImageView android:layout_width=&quot;15mm&quot; android:layout_height=&quot;13mm&quot; android:paddingRight=&quot;2mm&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="14"
            column="13"/>
    </issue>

    <issue
        id="InOrMmUsage"
        severity="Warning"
        message="Avoid using &quot;`mm`&quot; as units (it does not work accurately on all devices); use &quot;`dp`&quot; instead"
        category="Correctness"
        priority="4"
        summary="Using `mm` or `in` dimensions"
        explanation="Avoid using `mm` (millimeters) or `in` (inches) as the unit for dimensions.&#xA;&#xA;While it should work in principle, unfortunately many devices do not report the correct true physical density, which means that the dimension calculations won&apos;t work correctly. You are better off using `dp` (and for font sizes, `sp`)."
        errorLine1=" &lt;ImageView android:layout_width=&quot;15mm&quot; android:layout_height=&quot;13mm&quot; android:paddingRight=&quot;2mm&quot;"
        errorLine2="                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="14"
            column="41"/>
    </issue>

    <issue
        id="InOrMmUsage"
        severity="Warning"
        message="Avoid using &quot;`mm`&quot; as units (it does not work accurately on all devices); use &quot;`dp`&quot; instead"
        category="Correctness"
        priority="4"
        summary="Using `mm` or `in` dimensions"
        explanation="Avoid using `mm` (millimeters) or `in` (inches) as the unit for dimensions.&#xA;&#xA;While it should work in principle, unfortunately many devices do not report the correct true physical density, which means that the dimension calculations won&apos;t work correctly. You are better off using `dp` (and for font sizes, `sp`)."
        errorLine1=" &lt;ImageView android:layout_width=&quot;15mm&quot; android:layout_height=&quot;13mm&quot; android:paddingRight=&quot;2mm&quot;"
        errorLine2="                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="14"
            column="70"/>
    </issue>

    <issue
        id="LockedOrientationActivity"
        severity="Warning"
        message="Expecting `android:screenOrientation=&quot;unspecified&quot;` or `&quot;fullSensor&quot;` for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices"
        category="Correctness"
        priority="4"
        summary="Incompatible screenOrientation value"
        explanation="The `&lt;activity>` element should not be locked to any orientation so that users can take advantage of the multi-window environments and larger screens available on Android. To fix the issue, consider declaring the corresponding activity element with `screenOrientation=&quot;unspecified&quot;`or `&quot;fullSensor&quot;` attribute."
        url="https://developer.android.com/topic/arc/window-management"
        urls="https://developer.android.com/topic/arc/window-management"
        errorLine1="                  android:screenOrientation=&quot;portrait&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\AndroidManifest.xml"
            line="17"
            column="19"/>
    </issue>

    <issue
        id="LockedOrientationActivity"
        severity="Warning"
        message="Expecting `android:screenOrientation=&quot;unspecified&quot;` or `&quot;fullSensor&quot;` for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices"
        category="Correctness"
        priority="4"
        summary="Incompatible screenOrientation value"
        explanation="The `&lt;activity>` element should not be locked to any orientation so that users can take advantage of the multi-window environments and larger screens available on Android. To fix the issue, consider declaring the corresponding activity element with `screenOrientation=&quot;unspecified&quot;`or `&quot;fullSensor&quot;` attribute."
        url="https://developer.android.com/topic/arc/window-management"
        urls="https://developer.android.com/topic/arc/window-management"
        errorLine1="          android:screenOrientation=&quot;portrait&quot;>"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\AndroidManifest.xml"
            line="27"
            column="11"/>
    </issue>

    <issue
        id="LockedOrientationActivity"
        severity="Warning"
        message="Expecting `android:screenOrientation=&quot;unspecified&quot;` or `&quot;fullSensor&quot;` for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices"
        category="Correctness"
        priority="4"
        summary="Incompatible screenOrientation value"
        explanation="The `&lt;activity>` element should not be locked to any orientation so that users can take advantage of the multi-window environments and larger screens available on Android. To fix the issue, consider declaring the corresponding activity element with `screenOrientation=&quot;unspecified&quot;`or `&quot;fullSensor&quot;` attribute."
        url="https://developer.android.com/topic/arc/window-management"
        urls="https://developer.android.com/topic/arc/window-management"
        errorLine1="&lt;activity android:name=&quot;DodgePreferences&quot; android:screenOrientation=&quot;portrait&quot;>&lt;/activity>"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\AndroidManifest.xml"
            line="30"
            column="43"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="https://developer.android.com/training/multiscreen/screendensities.html"
        urls="https://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="            android:textSize=&quot;16dp&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="66"
            column="13"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="https://developer.android.com/training/multiscreen/screendensities.html"
        urls="https://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="        android:textSize=&quot;16dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="107"
            column="9"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This `Handler` class should be static or leaks might occur (anonymous android.os.Handler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a `Looper` or `MessageQueue` for a thread other than the main thread, then there is no issue. If the `Handler` is using the `Looper` or `MessageQueue` of the main thread, you need to fix your `Handler` declaration, as follows: Declare the `Handler` as a static class; In the outer class, instantiate a `WeakReference` to the outer class and pass this object to your `Handler` when you instantiate the `Handler`; Make all references to members of the outer class using the `WeakReference` object."
        errorLine1="        messageHandler = new Handler() {"
        errorLine2="                         ^">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\DodgeMain.java"
            line="63"
            column="26"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="            android:layout_weight=&quot;1&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="27"
            column="13"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `LinearLayout` parent is unnecessary; transfer the `background` attribute to the other view"
        category="Performance"
        priority="2"
        summary="Unnecessary parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;LinearLayout"
        errorLine2="     ~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="56"
            column="6"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `LinearLayout` parent is unnecessary; transfer the `background` attribute to the other view"
        category="Performance"
        priority="2"
        summary="Unnecessary parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="  &lt;LinearLayout"
        errorLine2="   ~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="96"
            column="4"/>
    </issue>

    <issue
        id="TypographyDashes"
        severity="Warning"
        message="Replace &quot;-&quot; with an &quot;en dash&quot; character (–, &amp;#8211;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Hyphen can be replaced with dash"
        explanation="The &quot;n dash&quot; (\u2013, &amp;#8211;) and the &quot;m dash&quot; (\u2014, &amp;#8212;) characters are used for ranges (n dash) and breaks (m dash). Using these instead of plain hyphens can make text easier to read and your application will look more polished."
        url="https://en.wikipedia.org/wiki/Dash"
        urls="https://en.wikipedia.org/wiki/Dash"
        errorLine1="&lt;string name=&quot;about_text&quot;>Dodge 1.5.1\n© 2010-2022 Brian Nenninger\n\nMove your blue circle to the green goal zone, avoiding the enemy dots roaming around the field. Steer by tilting the device, or by using the trackball or D-pad. You can also touch the screen to move to that location. When you reach the goal zone, the level will advance, more dots will be added, and the goal will switch to the other end. You have 9 lives in a normal game; free play lives are unlimited and you can continue from the highest level you\&apos;ve previously reached.\n\nUse the back button to pause a game in progress. From the preferences screen you can enable or disable tilt control, make the dots change colors continuously, show frames per second, or select a background image from your photos.\n\nContact me with bug reports or comments at bnenning@gmail.com\n\nDodge is open source:\nhttps://github.com/dozingcat/dodge-android&lt;/string>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\values\strings.xml"
            line="5"
            column="27"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `FieldView` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1=" public boolean onTouchEvent(MotionEvent event) {"
        errorLine2="                ~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\FieldView.java"
            line="377"
            column="17"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1=" &lt;ImageView android:layout_width=&quot;15mm&quot; android:layout_height=&quot;13mm&quot; android:paddingRight=&quot;2mm&quot;"
        errorLine2="  ~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="14"
            column="3"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="  levelText.setText(getString(R.string.level_prefix) + &quot; &quot; + levelManager.getCurrentLevel());"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\DodgeMain.java"
            line="348"
            column="21"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="  livesText.setText(getString(R.string.lives_prefix) + &quot; &quot; + ((lives>=0) ? &quot;&quot;+lives : getString(R.string.free_play_lives)));"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\DodgeMain.java"
            line="349"
            column="21"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Select Background...&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:gravity=&quot;left|center&quot; android:text=&quot;Select Background...&quot; android:paddingLeft=&quot;2mm&quot;"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="10"
            column="35"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Game paused&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Game paused&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="65"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Continue&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Continue&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="77"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;End Game&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;End Game&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="85"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Welcome to Dodge!&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Welcome to Dodge!&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="106"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;New Game&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;New Game&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="118"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Free Play&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Free Play&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="126"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Help/About&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Help/About&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="134"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Preferences&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;Preferences&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="142"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Continue Free Play&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Continue Free Play&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="168"
            column="9"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 4) you should **also** add `android:paddingLeft=&quot;4sp&quot;`"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must **also** specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="                android:paddingStart=&quot;4sp&quot; />"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="154"
            column="17"/>
    </issue>

    <issue
        id="RtlCompat"
        severity="Error"
        message="To support older versions than API 17 (project specifies 4) you should **also** add `android:paddingLeft=&quot;4sp&quot;`"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Right-to-left text compatibility issues"
        explanation="API 17 adds a `textAlignment` attribute to specify text alignment. However, if you are supporting older versions than API 17, you must **also** specify a gravity or layout_gravity attribute, since older platforms will ignore the `textAlignment` attribute."
        errorLine1="                android:paddingStart=&quot;4sp&quot; />"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="162"
            column="17"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="    android:gravity=&quot;left|center&quot; android:text=&quot;Select Background...&quot; android:paddingLeft=&quot;2mm&quot;"
        errorLine2="                                                                      ~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="10"
            column="71"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingRight` you should probably also define `paddingLeft` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1=" &lt;ImageView android:layout_width=&quot;15mm&quot; android:layout_height=&quot;13mm&quot; android:paddingRight=&quot;2mm&quot;"
        errorLine2="                                                                     ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="14"
            column="70"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="                android:paddingStart=&quot;4sp&quot; />"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="154"
            column="17"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="                android:paddingStart=&quot;4sp&quot; />"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="162"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingStart=&quot;2mm&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:gravity=&quot;left|center&quot; android:text=&quot;Select Background...&quot; android:paddingLeft=&quot;2mm&quot;"
        errorLine2="                                                                      ~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="10"
            column="71"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`start`&quot; instead of &quot;`left`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:gravity=&quot;left|center&quot; android:text=&quot;Select Background...&quot; android:paddingLeft=&quot;2mm&quot;"
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="10"
            column="22"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding `android:paddingEnd=&quot;2mm&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1=" &lt;ImageView android:layout_width=&quot;15mm&quot; android:layout_height=&quot;13mm&quot; android:paddingRight=&quot;2mm&quot;"
        errorLine2="                                                                     ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\image_preference.xml"
            line="14"
            column="70"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="             android:gravity=&quot;right&quot; />         "
        errorLine2="                              ~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="151"
            column="31"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="             android:gravity=&quot;right&quot; />     "
        errorLine2="                              ~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\res\layout\main.xml"
            line="159"
            column="31"/>
    </issue>

    <issue
        id="KeepScreenOn"
        severity="Information"
        message="The flag `FLAG_KEEP_SCREEN_ON` is dangerous"
        category="Greenness"
        priority="6"
        summary="You should avoid to keep the screen on"
        explanation="As a rule of thumb, keeping the device awake instead of letting it falling asleep is a bad practice"
        errorLine1="   window.addFlags(LayoutParams.FLAG_KEEP_SCREEN_ON);"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\FieldView.java"
            line="522"
            column="20"/>
    </issue>

    <issue
        id="SensorCoalesce"
        severity="Warning"
        message="Should use `registerListener(SensorEventListener, Sensor, int, int)` instead of `registerListener(SensorEventListener, Sensor, int)`"
        category="Greenness"
        priority="6"
        summary="Events should be kept temporarily before being delivered"
        explanation="The method registerListener(SensorEventListener, Sensor, int, int) allows eventsto be stored in the hardware queue (FIFO) up to maxReportLatencyUs. Setting maxReportLatencyUs to a positive value allows to reduce the number of interrupts the AP receives, hence reducing power consumption."
        url="https://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener,%20android.hardware.Sensor,%20int,%20int)"
        urls="https://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener,%20android.hardware.Sensor,%20int,%20int)"
        errorLine1="  sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), rate);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\OrientationListener.java"
            line="57"
            column="3"/>
    </issue>

    <issue
        id="SensorCoalesce"
        severity="Warning"
        message="Should use `registerListener(SensorEventListener, Sensor, int, int)` instead of `registerListener(SensorEventListener, Sensor, int)`"
        category="Greenness"
        priority="6"
        summary="Events should be kept temporarily before being delivered"
        explanation="The method registerListener(SensorEventListener, Sensor, int, int) allows eventsto be stored in the hardware queue (FIFO) up to maxReportLatencyUs. Setting maxReportLatencyUs to a positive value allows to reduce the number of interrupts the AP receives, hence reducing power consumption."
        url="https://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener,%20android.hardware.Sensor,%20int,%20int)"
        urls="https://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener,%20android.hardware.Sensor,%20int,%20int)"
        errorLine1="  sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD), rate);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\OrientationListener.java"
            line="58"
            column="3"/>
    </issue>

    <issue
        id="SensorLeak"
        severity="Error"
        message="The unregistration of this sensor is misplaced"
        category="Greenness"
        priority="6"
        summary="You did not unregister a sensor properly"
        explanation="Always make sure to disable sensors you don&apos;t need, especially when your activity is paused. Failing to do so can drain the battery in just a few hours. Note that the system will not disable sensors automatically when the screen turns off"
        url="https://developer.android.com/reference/android/hardware/SensorManager"
        urls="https://developer.android.com/reference/android/hardware/SensorManager"
        errorLine1="  sensorManager.unregisterListener(this);"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\dodge-android\app\src\main\java\com\dozingcatsoftware\dodge\OrientationListener.java"
            line="64"
            column="3"/>
    </issue>

</issues>
