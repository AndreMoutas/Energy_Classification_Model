<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 7.2.0">

    <issue
        id="ObsoleteLintCustomCheck"
        severity="Warning"
        message="Lint found an issue registry (`com.example.greenchecks.MyIssueRegistry`)&#xA;which did not specify the Lint API version it was compiled with.&#xA;&#xA;**This means that the lint checks are likely not compatible.**&#xA;&#xA;If you are the author of this lint check, make your lint&#xA;`IssueRegistry` class contain&#xA;  override val api: Int = com.android.tools.lint.detector.api.CURRENT_API&#xA;or from Java,&#xA;  @Override public int getApi() { return com.android.tools.lint.detector.api.ApiKt.CURRENT_API; }&#xA;&#xA;If you are just using lint checks from a third party library&#xA;you have no control over, you can disable these lint checks (if&#xA;they misbehave) like this:&#xA;&#xA;    android {&#xA;        lintOptions {&#xA;            disable &quot;BluetoothLowEnergy&quot;,&#xA;                    &quot;DarkUI&quot;,&#xA;                    &quot;DirtyBoot&quot;,&#xA;                    &quot;DurableWakeLock&quot;,&#xA;                    &quot;EverlastingService&quot;,&#xA;                    &quot;FusedLocationProvider&quot;,&#xA;                    &quot;InternetInTheLoop&quot;,&#xA;                    &quot;KeepCPUOn&quot;,&#xA;                    &quot;KeepScreenOn&quot;,&#xA;                    &quot;RigidAlarm&quot;,&#xA;                    &quot;SensorCoalesce&quot;,&#xA;                    &quot;SensorLeak&quot;,&#xA;                    &quot;UncompressedDataTransmission&quot;&#xA;        }&#xA;    }&#xA;"
        category="Lint"
        priority="10"
        summary="Obsolete custom lint check"
        explanation="Lint can be extended with &quot;custom checks&quot;: additional checks implemented by developers and libraries to for example enforce specific API usages required by a library or a company coding style guideline.&#xA;&#xA;The Lint APIs are not yet stable, so these checks may either cause a performance degradation, or stop working, or provide wrong results.&#xA;&#xA;This warning flags custom lint checks that are found to be using obsolete APIs and will need to be updated to run in the current lint environment.&#xA;&#xA;It may also flag issues found to be using a **newer** version of the API, meaning that you need to use a newer version of lint (or Android Studio or Gradle plugin etc) to work with these checks.">
        <location
            file="C:\Users\André\.android\lint\greenchecks.jar"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: https://developer.android.com/reference/android/os/Build.VERSION_CODES.html as well as follow this guide:&#xA;https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        url="https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        urls="https://developer.android.com/distribute/best-practices/develop/target-sdk.html,https://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 31"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\build.gradle"
            line="14"
            column="9"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="    override fun onCreateDialog(savedInstanceState: Bundle?) = BottomSheetDialog(context!!, theme).apply {"
        errorLine2="                                                                                 ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\CreateUserDialogFragment.kt"
            line="43"
            column="82"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val database = AppDatabase.with(context!!)"
        errorLine2="                                        ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\CreateUserDialogFragment.kt"
            line="84"
            column="41"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireArguments() instead of arguments!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val userId = arguments!!.getInt(ARG_USER_ID)"
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\DeleteUserDialogFragment.kt"
            line="42"
            column="22"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireArguments() instead of arguments!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val userTitle = arguments!!.getString(ARG_USER_TItLE)"
        errorLine2="                        ~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\DeleteUserDialogFragment.kt"
            line="43"
            column="25"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        return AlertDialog.Builder(context!!, theme)"
        errorLine2="                                   ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\DeleteUserDialogFragment.kt"
            line="45"
            column="36"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="                    val database = AppDatabase.with(context!!)"
        errorLine2="                                                    ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\DeleteUserDialogFragment.kt"
            line="49"
            column="53"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireArguments() instead of arguments!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val userId = arguments!!.getInt(ARG_USER_ID)"
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserDialogFragment.kt"
            line="42"
            column="22"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireArguments() instead of arguments!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val userTitle = arguments!!.getString(ARG_USER_TItLE)!!"
        errorLine2="                        ~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserDialogFragment.kt"
            line="43"
            column="25"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val database = AppDatabase.with(context!!)"
        errorLine2="                                        ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserDifficultyDialog.kt"
            line="301"
            column="41"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireArguments() instead of arguments!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val userId = arguments!!.getInt(EXTRA_USER_ID)"
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserDifficultyDialog.kt"
            line="302"
            column="22"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="            Toast.makeText(context!!, R.string.difficulty_save_toast, Toast.LENGTH_SHORT).show()"
        errorLine2="                           ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserDifficultyDialog.kt"
            line="349"
            column="28"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog = object: BottomSheetDialog(context!!, theme) {"
        errorLine2="                                                                                                 ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserDifficultyDialog.kt"
            line="750"
            column="98"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val database = AppDatabase.with(context!!)"
        errorLine2="                                        ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserInputConfigurationDialog.kt"
            line="100"
            column="41"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireArguments() instead of arguments!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val userId = arguments!!.getInt(ARG_USER_ID)"
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserInputConfigurationDialog.kt"
            line="101"
            column="22"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        binding.keyboardSizeButton.setOnClickListener { startActivityForResult(ConfigureScaleFactorActivity.buildIntent(context!!, inputConfiguration), REQUEST_CHANGE_SIZE) }"
        errorLine2="                                                                                                                        ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserInputConfigurationDialog.kt"
            line="124"
            column="121"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="            Toast.makeText(context!!, R.string.difficulty_save_toast, Toast.LENGTH_SHORT).show()"
        errorLine2="                           ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserInputConfigurationDialog.kt"
            line="132"
            column="28"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog = object: BottomSheetDialog(context!!, theme) {"
        errorLine2="                                                                                                 ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\EditUserInputConfigurationDialog.kt"
            line="242"
            column="98"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireArguments() instead of arguments!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val userId = arguments!!.getInt(USER_ID)"
        errorLine2="                     ~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\ViewUserStatisticDialogFragment.kt"
            line="45"
            column="22"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="        val database = AppDatabase.with(context!!)"
        errorLine2="                                        ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\ViewUserStatisticDialogFragment.kt"
            line="46"
            column="41"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="            binding.playDuration = if (it.playTime == 0L) null else Time.formatTime(it.playTime, context!!)"
        errorLine2="                                                                                                 ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\ViewUserStatisticDialogFragment.kt"
            line="52"
            column="98"/>
    </issue>

    <issue
        id="UseRequireInsteadOfGet"
        severity="Error"
        message="Use requireContext() instead of context!!"
        category="Correctness"
        priority="6"
        summary="Use the &apos;require_____()&apos; API rather than &apos;get____()&apos; API for more descriptive error messages when it&apos;s null."
        explanation="AndroidX added new &quot;require____()&quot; versions of common &quot;get___()&quot; APIs, such as getContext/getActivity/getArguments/etc. Rather than wrap these in something like requireNotNull(), using these APIs will allow the underlying component to try to tell you _why_ it was null, and thus yield a better error message."
        errorLine1="            binding.playDuration = if (it.playTime == 0L) null else Time.formatTime(it.playTime, context!!)"
        errorLine2="                                                                                                 ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\user\ViewUserStatisticDialogFragment.kt"
            line="52"
            column="98"/>
    </issue>

    <issue
        id="RedundantLabel"
        severity="Warning"
        message="Redundant label can be removed"
        category="Correctness"
        priority="5"
        summary="Redundant label on activity"
        explanation="When an activity does not have a label attribute, it will use the one from the application tag. Since the application has already specified the same label, the label on this activity can be omitted."
        errorLine1="            android:label=&quot;@string/app_name&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\AndroidManifest.xml"
            line="17"
            column="13"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="    android:tint=&quot;?attr/colorControlNormal&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_backspace_24.xml"
            line="6"
            column="19"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="      android:fillColor=&quot;@android:color/white&quot;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_backspace_24.xml"
            line="8"
            column="26"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="    android:tint=&quot;?attr/colorControlNormal&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_check_24.xml"
            line="6"
            column="19"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="      android:fillColor=&quot;@android:color/white&quot;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_check_24.xml"
            line="8"
            column="26"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="    android:tint=&quot;?attr/colorControlNormal&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_close_24.xml"
            line="6"
            column="19"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="      android:fillColor=&quot;@android:color/white&quot;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_close_24.xml"
            line="8"
            column="26"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="    android:tint=&quot;?attr/colorControlNormal&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_trending_down_24.xml"
            line="6"
            column="19"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="      android:fillColor=&quot;@android:color/white&quot;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_trending_down_24.xml"
            line="8"
            column="26"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="    android:tint=&quot;?attr/colorControlNormal&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_trending_flat_24.xml"
            line="6"
            column="19"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="      android:fillColor=&quot;@android:color/white&quot;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_trending_flat_24.xml"
            line="8"
            column="26"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="    android:tint=&quot;?attr/colorControlNormal&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_trending_up_24.xml"
            line="6"
            column="19"/>
    </issue>

    <issue
        id="VectorRaster"
        severity="Warning"
        message="Resource references will not work correctly in images generated for this vector icon for API &lt; 21; check generated icon to make sure it looks acceptable"
        category="Correctness"
        priority="5"
        summary="Vector Image Generation"
        explanation="Vector icons require API 21 or API 24 depending on used features, but when `minSdkVersion` is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the `drawable` folder is automatically moved to `drawable-anydpi-v21` or `drawable-anydpi-v24` and bitmap images are generated for different screen resolutions for backwards compatibility.&#xA;&#xA;However, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices."
        errorLine1="      android:fillColor=&quot;@android:color/white&quot;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\drawable\ic_baseline_trending_up_24.xml"
            line="8"
            column="26"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.fragment:fragment-ktx than 1.4.1 is available: 1.5.2"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &quot;androidx.fragment:fragment-ktx:1.4.1&quot;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\build.gradle"
            line="45"
            column="20"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.appcompat:appcompat than 1.4.1 is available: 1.5.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;androidx.appcompat:appcompat:1.4.1&apos;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\build.gradle"
            line="46"
            column="20"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.google.android.material:material than 1.6.0 is available: 1.6.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;com.google.android.material:material:1.6.0&apos;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\build.gradle"
            line="47"
            column="20"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of org.jetbrains.kotlin:kotlin-stdlib-jdk8 than 1.6.21 is available: 1.7.10"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version&quot;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\build.gradle"
            line="49"
            column="20"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of org.jetbrains.kotlinx:kotlinx-coroutines-core than 1.4.1 is available: 1.6.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1&apos;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\build.gradle"
            line="50"
            column="20"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.room:room-runtime than 2.4.2 is available: 2.4.3"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &quot;androidx.room:room-runtime:$room_version&quot;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\build.gradle"
            line="51"
            column="20"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.room:room-ktx than 2.4.2 is available: 2.4.3"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &quot;androidx.room:room-ktx:$room_version&quot;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\build.gradle"
            line="53"
            column="20"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;time_minute&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="32"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;time_hour&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="36"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;user_list_blocks&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="42"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;training_result_mistakes&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="57"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;training_result_seconds&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="61"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;training_block_result_too_much_mistakes&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="65"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;training_block_result_good&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="71"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;difficulty_digit_counter&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="96"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;difficulty_tasks_per_block&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="123"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;difficulty_take_wrong_tasks&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="129"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;difficulty_take_right_tasks&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="133"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;difficulty_max_wrong_tasks&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="137"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;difficulty_general_summary_tasks&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="141"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;difficulty_general_summary_mistake&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="145"
            column="5"/>
    </issue>

    <issue
        id="MissingQuantity"
        severity="Error"
        message="For locale &quot;fr&quot; (French) the following quantities should also be defined: `many`"
        category="Correctness:Messages"
        priority="8"
        summary="Missing quantity translation"
        explanation="Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we&apos;d write &quot;n books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions.&#xA;&#xA;This lint check looks at each translation of a `&lt;plural>` and makes sure that all the quantity strings considered by the given language are provided by this translation.&#xA;&#xA;For example, an English translation must provide a string for `quantity=&quot;one&quot;`. Similarly, a Czech translation must provide a string for `quantity=&quot;few&quot;`."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;plurals name=&quot;statistic_solved_tasks&quot;>"
        errorLine2="    ^">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="158"
            column="5"/>
    </issue>

    <issue
        id="ImpliedQuantity"
        severity="Error"
        message="The quantity `&apos;one&apos;` matches more than one specific number in this locale (0, 1), but the message did not include a formatting argument (such as `%d`). This is usually an internationalization error. See full issue explanation for more."
        category="Correctness:Messages"
        priority="5"
        summary="Implied Quantities"
        explanation="Plural strings should generally include a `%s` or `%d` formatting argument. In locales like English, the `one` quantity only applies to a single value, 1, but that&apos;s not true everywhere. For example, in Slovene, the `one` quantity will apply to 1, 101, 201, 301, and so on. Similarly, there are locales where multiple values match the `zero` and `two` quantities.&#xA;&#xA;In these locales, it is usually an error to have a message which does not include a formatting argument (such as &apos;%d&apos;), since it will not be clear from the grammar what quantity the quantity string is describing."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="        &lt;item quantity=&quot;one&quot;>Une erreur, c\&apos;est bien&lt;/item>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values-fr\strings.xml"
            line="72"
            column="9"/>
    </issue>

    <issue
        id="PluralsCandidate"
        severity="Warning"
        message="Formatting %d followed by words (&quot;correct&quot;): This should probably be a plural rather than a string"
        category="Correctness:Messages"
        priority="5"
        summary="Potential Plurals"
        explanation="This lint check looks for potential errors in internationalization where you have translated a message which involves a quantity and it looks like other parts of the string may need grammatical changes.&#xA;&#xA;For example, rather than something like this:&#xA;```xml&#xA;  &lt;string name=&quot;try_again&quot;>Try again in %d seconds.&lt;/string>&#xA;```&#xA;you should be using a plural:&#xA;```xml&#xA;   &lt;plurals name=&quot;try_again&quot;>&#xA;        &lt;item quantity=&quot;one&quot;>Try again in %d second&lt;/item>&#xA;        &lt;item quantity=&quot;other&quot;>Try again in %d seconds&lt;/item>&#xA;    &lt;/plurals>&#xA;```&#xA;This will ensure that in other languages the right set of translations are provided for the different quantity classes.&#xA;&#xA;(This check depends on some heuristics, so it may not accurately determine whether a string really should be a quantity. You can use tools:ignore to filter out false positives."
        url="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        urls="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals"
        errorLine1="    &lt;string name=&quot;difficulty_general_summary&quot;>%s; %s; %s; repeat %d correct, %d wrong answered tasks&lt;/string>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\values\strings.xml"
            line="148"
            column="5"/>
    </issue>

    <issue
        id="DataExtractionRules"
        severity="Warning"
        message="The attribute `android:allowBackup` is deprecated from Android 12 and higher and may be removed in future versions. Consider adding the attribute `android:dataExtractionRules` specifying an `@xml` resource which configures cloud backups and device transfers on Android 12 and higher."
        category="Security"
        priority="3"
        summary="Missing data extraction rules"
        explanation="Before Android 12, the attributes `android:allowBackup` and `android:fullBackupContent` were used to configure all forms of backup, including cloud backups, device-to-device transfers and adb backup.&#xA;&#xA;In Android 12 and higher, these attributes have been deprecated and will only apply to cloud backups. You should instead use the attribute `android:dataExtractionRules`, specifying an `@xml` resource that configures which files to back up, for cloud backups and for device-to-device transfers, separately. If your `minSdkVersion` supports older versions, you&apos;ll still want to specify an `android:fullBackupContent` resource if the default behavior is not right for your app."
        url="https://developer.android.com/about/versions/12/backup-restore#xml-changes"
        urls="https://developer.android.com/about/versions/12/backup-restore#xml-changes"
        errorLine1="        android:allowBackup=&quot;false&quot;"
        errorLine2="                             ~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\AndroidManifest.xml"
            line="7"
            column="30"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="    var items: List&lt;TrainingStatisticListItem> by Delegates.observable(emptyList()) { _, _, _ -> notifyDataSetChanged() }"
        errorLine2="                                                                                                 ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\training\statistic\TrainingStatisticAdapter.kt"
            line="34"
            column="98"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="    var data: List&lt;User> by Delegates.observable(emptyList()) { _, _, _ -> notifyDataSetChanged() }"
        errorLine2="                                                                           ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\userlist\UserListAdapter.kt"
            line="28"
            column="76"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one `&lt;TextView/>` and a compound drawable"
        category="Performance"
        priority="6"
        summary="Node can be replaced by a `TextView` with compound drawables"
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).&#xA;&#xA;If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.&#xA;&#xA;There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="    &lt;LinearLayout"
        errorLine2="     ~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\layout\training_statistic_header.xml"
            line="19"
            column="6"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a `LinearLayout` is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="    &lt;LinearLayout"
        errorLine2="     ~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\layout\training_statistic_task.xml"
            line="30"
            column="6"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `RelativeLayout` parent is unnecessary"
        category="Performance"
        priority="2"
        summary="Unnecessary parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="        &lt;LinearLayout"
        errorLine2="         ~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\layout\training_countdown_view.xml"
            line="31"
            column="10"/>
    </issue>

    <issue
        id="Autofill"
        severity="Warning"
        message="Missing `autofillHints` attribute"
        category="Usability"
        priority="3"
        summary="Use Autofill"
        explanation="Specify an `autofillHints` attribute when targeting SDK version 26 or higher or explicitly specify that the view is not important for autofill. Your app can help an autofill service classify the data correctly by providing the meaning of each view that could be autofillable, such as views representing usernames, passwords, credit card fields, email addresses, etc.&#xA;&#xA;The hints can have any value, but it is recommended to use predefined values like &apos;username&apos; for a username or &apos;creditCardNumber&apos; for a credit card number. For a list of all predefined autofill hint constants, see the `AUTOFILL_HINT_` constants in the `View` reference at https://developer.android.com/reference/android/view/View.html.&#xA;&#xA;You can mark a view unimportant for autofill by specifying an `importantForAutofill` attribute on that view or a parent view. See https://developer.android.com/reference/android/view/View.html#setImportantForAutofill(int)."
        url="https://developer.android.com/guide/topics/text/autofill.html"
        urls="https://developer.android.com/guide/topics/text/autofill.html"
        errorLine1="        &lt;EditText"
        errorLine2="         ~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\layout\create_user_dialog.xml"
            line="23"
            column="10"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="                &lt;ImageView"
        errorLine2="                 ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\layout\about_activity.xml"
            line="38"
            column="18"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="        &lt;ImageView"
        errorLine2="         ~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\res\layout\training_statistic_header.xml"
            line="37"
            column="10"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="        view.text.text = &quot;${sourceLabel}: $formattedValue&quot;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Github\rechnen-android\app\src\main\java\com\rechnen\app\ui\training\statistic\TrainingStatisticViewBinder.kt"
            line="64"
            column="26"/>
    </issue>

</issues>
